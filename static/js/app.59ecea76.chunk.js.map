{"version":3,"sources":["screens/NotFoundScreen.tsx","constants/Colors.ts","components/Themed.tsx","components/ReceipeSearch.tsx","screens/TabOneScreen.tsx","components/StyledText.tsx","components/EditScreenInfo.tsx","screens/TabTwoScreen.tsx","navigation/BottomTabNavigator.tsx","navigation/LinkingConfiguration.ts","navigation/index.tsx","App.tsx","hooks/useCachedResources.ts","hooks/useColorScheme.web.ts","assets/fonts/SpaceMono-Regular.ttf"],"names":["NotFoundScreen","navigation","View","style","styles","container","Text","title","TouchableOpacity","onPress","replace","link","linkText","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent","padding","fontSize","fontWeight","marginTop","paddingVertical","color","light","text","background","tint","tabIconDefault","tabIconSelected","dark","useThemeColor","props","colorName","colorFromProps","Colors","lightColor","darkColor","otherProps","ReceipeSearch","path","useState","totFlav","currTotFlavor","setTotFlav","totLogic","currTotLogic","setTotLogic","currLogStr","currentLogicString","setLogicString","currentLogic","currentLogicState","setLogicState","currentFlavor","currentFlavorState","setFlavorState","logicFunction","label","changeLogic","changeLogicString","currentString","state","setState","changeDescription","addFlavor","flavString","LogicString","concat","totLogicSet","items","value","defaultNull","placeholder","containerStyle","height","onChangeItem","item","separator","Button","flavorList","developmentModeText","marginBottom","lineHeight","textAlign","contentContainer","paddingTop","welcomeContainer","welcomeImage","width","resizeMode","marginLeft","getStartedContainer","marginHorizontal","homeScreenFilename","marginVertical","codeHighlightText","codeHighlightContainer","borderRadius","paddingHorizontal","getStartedText","helpContainer","helpLink","helpLinkText","TabOneScreen","MonoText","fontFamily","EditScreenInfo","handleHelpPress","WebBrowser","TabTwoScreen","BottomTab","createBottomTabNavigator","BottomTabNavigator","Navigator","initialRouteName","tabBarOptions","activeTintColor","Screen","name","component","TabOneNavigator","options","tabBarIcon","TabBarIcon","TabTwoNavigator","Ionicons","size","TabOneStack","createStackNavigator","headerTitle","TabTwoStack","prefixes","Linking","config","screens","Root","TabOne","TabTwo","NotFound","Navigation","colorScheme","NavigationContainer","linking","LinkingConfiguration","theme","DarkTheme","DefaultTheme","RootNavigator","Stack","screenOptions","headerShown","App","React","isLoadingComplete","setLoadingComplete","a","async","SplashScreen","Font","font","require","console","warn","useCachedResources","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.59ecea76.chunk.js","sourcesContent":["import { StackScreenProps } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native';\n\nimport { RootStackParamList } from '../types';\n\nexport default function NotFoundScreen({\n  navigation,\n}: StackScreenProps<RootStackParamList, 'NotFound'>) {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>This screen doesn't exist.</Text>\n      <TouchableOpacity onPress={() => navigation.replace('Root')} style={styles.link}>\n        <Text style={styles.linkText}>Go to home screen!</Text>\n      </TouchableOpacity>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    padding: 20,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  link: {\n    marginTop: 15,\n    paddingVertical: 15,\n  },\n  linkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","const tintColorLight = '#2f95dc';\nconst tintColorDark = '#fff';\n\nexport default {\n  light: {\n    text: '#000',\n    background: '#fff',\n    tint: tintColorLight,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorLight,\n  },\n  dark: {\n    text: '#fff',\n    background: '#000',\n    tint: tintColorDark,\n    tabIconDefault: '#ccc',\n    tabIconSelected: tintColorDark,\n  },\n};\n","import * as React from 'react';\nimport { Text as DefaultText, View as DefaultView } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\n\nexport function useThemeColor(\n  props: { light?: string; dark?: string },\n  colorName: keyof typeof Colors.light & keyof typeof Colors.dark\n) {\n  const theme = useColorScheme();\n  const colorFromProps = props[theme];\n\n  if (colorFromProps) {\n    return colorFromProps;\n  } else {\n    return Colors[theme][colorName];\n  }\n}\n\ntype ThemeProps = {\n  lightColor?: string;\n  darkColor?: string;\n};\n\nexport type TextProps = ThemeProps & DefaultText['props'];\nexport type ViewProps = ThemeProps & DefaultView['props'];\n\nexport function Text(props: TextProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const color = useThemeColor({ light: lightColor, dark: darkColor }, 'text');\n\n  return <DefaultText style={[{ color }, style]} {...otherProps} />;\n}\n\nexport function View(props: ViewProps) {\n  const { style, lightColor, darkColor, ...otherProps } = props;\n  const backgroundColor = useThemeColor({ light: lightColor, dark: darkColor }, 'background');\n\n  return <DefaultView style={[{ backgroundColor }, style]} {...otherProps} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\r\nimport React, {useState, setState, Component} from 'react';\r\nimport { StyleSheet, TouchableOpacity, Button, Alert, Platform } from 'react-native';\r\n\r\nimport Colors from '../constants/Colors';\r\nimport { MonoText } from './StyledText';\r\nimport { Text, View } from './Themed';\r\nimport DropDownPicker from 'react-native-dropdown-picker';\r\n\r\nvar DefaultDescriptionString = \"Select an Option to Learn More!\";\r\nvar AstringentString = 'The astringent taste is a flavor of dryness that is generally produced by tannins in the bark, leaves and outer rinds of fruits and trees. It causes the mucus membranes in the mouth to contract and results in an immediate dry, chalky (sometimes even choking) sensation in the mouth. The astringent taste is frequently complimented by the sweet or sour tastes.';\r\nvar CoolString = \"Food that has a temperature of >= 70°\";\r\nvar HotString = \"Food that has a temperature of < 70°\"\r\nvar PungentString = \"The pungent taste is one of dry heat and can be found in spicy foods and many herbs and spices. It is usually created by the presence of aromatic volatile oils, resins, and mustard glycosides that stimulate the tissues and nerve endings of the mouth with a sensation of heat.\";\r\nvar SaltyString = \"Saltiness is a taste produced by the presence of sodium chloride (and to a lesser degree other salts). The ions of salt, especially sodium (Na+), can pass directly through ion channels in the tongue, leading to an action potential. \";\r\nvar SourString = \"Sourness is the taste that detects acids. The mechanism for detecting sour taste is similar to that which detects salt taste. Hydrogen ion channels detect the concentration of hydronium ions (H3O+ ions) that have dissociated from an acid. Hydrogen ions are capable of permeating the amiloride-sensitive sodium channels, but this is not the only mechanism involved in detecting the quality of sourness. Hydrogen ions also inhibit the potassium channel, which normally functions to hyperpolarize the cell. Thus, by a combination of direct intake of hydrogen ions (which itself depolarizes the cell) and the inhibition of the hyperpolarizing channel, sourness causes the taste cell to fire in this specific manner. \";\r\nvar SweetString = \"Sweetness Sweetness is produced by the presence of sugars, some proteins and a few other substances. Sweetness is often connected to aldehydes and ketones which contain carbonyl group. Sweetness is detected by a variety of G protein coupled receptors coupled to the G protein gustducin found on the taste buds. At least two different variants of the \\\"sweetness receptors\\\" need to be activated for the brain to register sweetness. The compounds which the brain senses as sweet are thus compounds that can bind with varying bond strength to several different sweetness receptors. The differences between the different sweetness receptors is mainly in the binding site of the G protein coupled receptors. The average human detection threshold for sucrose is 10 millimoles per litre. For lactose it is 30 millimoles per liter, and 5-Nitro-2-propoxyaniline 0.002 millimoles per litre. \";\r\nvar UmamiString = \"Savouriness is the name for the taste sensation produced by the free glutamates commonly found in fermented and aged foods. In English, it is sometimes described as \\\"meaty\\\" or \\\"savoury\\\". In the Japanese, the term umami is used for this taste sensation, whose characters literally mean \\\"delicious flavour.\\\" Umami is now the commonly used term by taste scientists. The same taste is referred to as xianwèi in Chinese cooking. Savoury is considered a fundamental taste in Japanese and Chinese cooking, but is not discussed as much in Western cuisine. Examples of food containing these free glutamates (and thus strong in the savoury taste) are parmesan and roquefort cheese as well as soy sauce and fish sauce. It is also found in significant amounts in various unfermented foods such as walnuts, grapes, broccoli, tomatoes, and mushrooms, and to a lesser degree in meat. The glutamate taste sensation is most intense in combination with sodium. This is one reason why tomatoes exhibit a stronger taste after adding salt. Sauces with savoury and salty tastes are very popular for cooking, such as tomato sauces and ketchup for Western cuisines and soy sauce and fish sauce for East Asian and Southeast Asian cuisines. Since not every glutamate produces a savoury-like taste sensation, there is continuing investigation into the exact mechanism of how the savoury taste sensation is produced. The additive monosodium glutamate (MSG), which was developed as a food additive in 1907 by Kikunae Ikeda, produces a strong savoury taste. Savoury is also provided by the nucleotides disodium 5’-inosine monophosphate (IMP) and disodium 5’-guanosine monophosphate (GMP). These are naturally present in many protein-rich foods. IMP is present in high concentrations in many foods, including dried skipjack tuna flakes used to make dashi, a Japanese broth. GMP is present in high concentration in dried shiitake mushrooms, used in much of the cuisine of Asia. There is a synergistic effect between MSG, IMP and GMP which together in certain ratios produce a strong umami taste. A subset of savoury taste buds responds specifically to glutamate in the same way that sweet ones respond to sugar. Glutamate binds to a variant of G protein coupled glutamate receptors.\";\r\nvar descrANDstring = \"Specified Flavor must exist in the receipe\";\r\nvar descrNOTstring = \"Specified Flavor must NOT exist in the receipe\";\r\n\r\n\r\nexport default function ReceipeSearch({ path }: { path: string }) {\r\n  var currentFlavor = \"\";\r\n  var currentLogic = \"\";\r\n  const [count, setCount] = useState(0);\r\n\r\n  const[currTotFlavor, setTotFlav] = useState({\r\n    totFlav: 'A'\r\n  })\r\n  const totFlavSet = (label) => {\r\n    setTotFlav({\r\n      totFlav: label\r\n    })\r\n  }\r\n  const[currTotLogic, setTotLogic] = useState({\r\n    totLogic: 'B'\r\n  })\r\n  const totLogicSet = (label) => {\r\n    setTotLogic({\r\n      totLogic: label\r\n    })\r\n  }\r\n\r\n  const[currentLogicString, setLogicString] = useState({\r\n    currLogStr: ''\r\n  })\r\n  const[currentLogicState, setLogicState] = useState({\r\n    currentLogic: ''\r\n  })\r\n\r\n  const changeLogic = (label) => {\r\n    setLogicState({\r\n      currentLogic: label\r\n    })\r\n  }\r\n\r\n  const [currentFlavorState, setFlavorState] = useState({\r\n    currentFlavor: 'Astringent'\r\n  })\r\n  const changeLogicString = (label) => {\r\n    if(label == 'AND')\r\n    {\r\n      setLogicString({\r\n        currLogStr: descrANDstring\r\n      })\r\n    } else if(label == 'NOT') {\r\n      setLogicString({\r\n        currLogStr: descrNOTstring\r\n      })\r\n    } else {\r\n      setLogicString({\r\n        currLogStr: label\r\n      })\r\n    }\r\n\r\n  }\r\n\r\n\r\n\r\n  function flavorFunction(label)\r\n  {\r\n    setFlavorState({currentFlavor: label});\r\n    currentFlavor = label;\r\n    changeDescription(label);\r\n  }\r\n\r\n  function logicFunction(label)\r\n  {\r\n    changeLogic(label);\r\n    currentLogic = label;\r\n    changeLogicString(label);\r\n  }\r\n\r\n  const [state, setState] = useState({\r\n    currentString: DefaultDescriptionString\r\n  })\r\n\r\n  const changeDescription = (label) => {\r\n    if(label == 'Astringent')\r\n    {\r\n      setState({\r\n        currentString: AstringentString\r\n      })\r\n    } else if(label == 'Cool') {\r\n      setState({\r\n        currentString: CoolString\r\n      })\r\n    } else if(label == 'Hot') {\r\n      setState({\r\n        currentString: HotString\r\n      })\r\n    } else if(label == 'Pungent') {\r\n      setState({\r\n        currentString: PungentString\r\n      })\r\n    } else if(label == 'Salty') {\r\n      setState({\r\n        currentString: SaltyString\r\n      })\r\n    } else if(label == 'Sour') {\r\n      setState({\r\n        currentString: SourString\r\n      })\r\n    } else if(label == 'Sweet') {\r\n      setState({\r\n        currentString: SweetString\r\n      })\r\n    } else if(label == 'Umami') {\r\n      setState({\r\n        currentString: UmamiString\r\n      })\r\n    } else {\r\n      setState({\r\n        currentString: currentFlavorState.currentFlavor\r\n      })\r\n    }\r\n  }\r\n\r\n  function searchRecipe()\r\n  {\r\n    Alert.alert('You tapped the button!')\r\n  }\r\n\r\n  function addFlavor(currentFlavor, currentLogic)\r\n  {\r\n    var flavString = \"\";\r\n    var LogicString = \"\";\r\n    if(currTotFlavor.totFlav == \"A\")\r\n    {\r\n      flavString = currentFlavor.concat(' ');\r\n    }\r\n    else\r\n    {\r\n      flavString = currTotFlavor.totFlav;\r\n      flavString = flavString.concat(currentFlavor,' ');\r\n    }\r\n    if(currTotFlavor.totLogic == \"B\")\r\n    {\r\n      LogicString = currentLogic.concat(' ');\r\n    }\r\n    else\r\n    {\r\n      LogicString = currTotLogic.totLogic;\r\n      LogicString = LogicString.concat(currentLogic, ' ');\r\n    }\r\n    totFlavSet(flavString);\r\n    totLogicSet(LogicString);\r\n  }\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <DropDownPicker\r\n        items={[\r\n            {label: 'Astringent', value: 'Astringent'},\r\n            {label: 'Cool', value: 'Cool'},\r\n            {label: 'Hot', value: 'Hot'},\r\n            {label: 'Pungent', value: 'Pungent'},\r\n            {label: 'Salty', value: 'Salty'},\r\n            {label: 'Sour', value: 'Sour'},\r\n            {label: 'Sweet', value: 'Sweet'},\r\n            {label: 'Umami', value: 'Umami'},\r\n        ]}\r\n        defaultNull\r\n        placeholder=\"Select a taste!\"\r\n        containerStyle={{height: 40}}\r\n        onChangeItem={item => flavorFunction(item.label)}\r\n      />\r\n      <Text>{state.currentString}</Text>\r\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\r\n      <DropDownPicker\r\n        items={[\r\n            {label: 'And', value: 'AND'},\r\n            {label: 'Not', value: 'NOT'},\r\n        ]}\r\n        defaultNull\r\n        placeholder=\"Select Logic\"\r\n        containerStyle={{height: 40}}\r\n        onChangeItem={item => logicFunction(item.value)}\r\n      />\r\n      <Text>{currentLogicString.currLogStr}</Text>\r\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\r\n      <Button\r\n        title=\"Add Flavor\"\r\n        color=\"rgb(250, 120, 87)\"\r\n        onPress={() => addFlavor(currentFlavorState.currentFlavor, currentLogicState.currentLogic)}\r\n      />\r\n    <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\r\n    <View>\r\n    <Text style={styles.flavorList}>\r\n      {currTotFlavor.totFlav}\r\n    </Text>\r\n      <Button\r\n        title=\"Search Receipes!\"\r\n        color=\"rgb(250, 120, 87)\"\r\n      />\r\n    </View>\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: 'rgb(255, 108, 71)',\r\n  },\r\n  developmentModeText: {\r\n    marginBottom: 20,\r\n    fontSize: 14,\r\n    lineHeight: 19,\r\n    textAlign: 'center',\r\n  },\r\n  contentContainer: {\r\n    paddingTop: 30,\r\n  },\r\n  welcomeContainer: {\r\n    alignItems: 'center',\r\n    marginTop: 10,\r\n    marginBottom: 20,\r\n  },\r\n  welcomeImage: {\r\n    width: 100,\r\n    height: 80,\r\n    resizeMode: 'contain',\r\n    marginTop: 3,\r\n    marginLeft: -10,\r\n  },\r\n  getStartedContainer: {\r\n    alignItems: 'center',\r\n    marginHorizontal: 50,\r\n  },\r\n  homeScreenFilename: {\r\n    marginVertical: 7,\r\n  },\r\n  codeHighlightText: {\r\n    color: 'rgba(96,100,109, 0.8)',\r\n  },\r\n  codeHighlightContainer: {\r\n    borderRadius: 3,\r\n    paddingHorizontal: 4,\r\n  },\r\n  getStartedText: {\r\n    fontSize: 17,\r\n    lineHeight: 24,\r\n    textAlign: 'center',\r\n  },\r\n  helpContainer: {\r\n    marginTop: 15,\r\n    marginHorizontal: 20,\r\n    alignItems: 'center',\r\n  },\r\n  helpLink: {\r\n    paddingVertical: 15,\r\n  },\r\n  helpLinkText: {\r\n    textAlign: 'center',\r\n  },\r\n  separator: {\r\n    marginVertical: 30,\r\n    height: 1,\r\n    width: '100%',\r\n    alignItems: 'center',\r\n  },\r\n  flavorList: {\r\n    alignItems: 'center',\r\n  },\r\n});\r\n","import * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport ReceipeSearch from '../components/ReceipeSearch';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabOneScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>Find a Receipe</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <ReceipeSearch path=\"/screens/TabOneScreen.js\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'rgb(255, 108, 71)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import * as React from 'react';\n\nimport { Text, TextProps } from './Themed';\n\nexport function MonoText(props: TextProps) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as WebBrowser from 'expo-web-browser';\nimport React from 'react';\nimport { StyleSheet, TouchableOpacity } from 'react-native';\n\nimport Colors from '../constants/Colors';\nimport { MonoText } from './StyledText';\nimport { Text, View } from './Themed';\n\nexport default function EditScreenInfo({ path }: { path: string }) {\n  return (\n    <View>\n      <View style={styles.getStartedContainer}>\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Open up the code for this screen;\n        </Text>\n\n        <View\n          style={[styles.codeHighlightContainer, styles.homeScreenFilename]}\n          darkColor=\"rgba(255,255,255,0.05)\"\n          lightColor=\"rgba(0,0,0,0.05)\">\n          <MonoText>{path}</MonoText>\n        </View>\n\n        <Text\n          style={styles.getStartedText}\n          lightColor=\"rgba(0,0,0,0.8)\"\n          darkColor=\"rgba(255,255,255,0.8)\">\n          Change any of the text, save the file, and your app will automatically update.\n        </Text>\n      </View>\n\n      <View style={styles.helpContainer}>\n        <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n          <Text style={styles.helpLinkText} lightColor={Colors.light.tint}>\n            Tap here if your app doesn't automatically update after making changes\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </View>\n  );\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/get-started/create-a-new-app/#opening-the-app-on-your-phonetablet'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#123',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  helpContainer: {\n    marginTop: 15,\n    marginHorizontal: 20,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    textAlign: 'center',\n  },\n});\n","//Colors\n// 255, 108, 71 Primary Color\n// 250, 120, 87 Accent Color\n// 235, 52, 52 Secondary Color\n\n\nimport * as React from 'react';\nimport { StyleSheet } from 'react-native';\n\nimport EditScreenInfo from '../components/EditScreenInfo';\nimport { Text, View } from '../components/Themed';\n\nexport default function TabTwoScreen() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>My Food</Text>\n      <View style={styles.separator} lightColor=\"rgb(235, 52, 52)\" darkColor=\"rgba(255,255,255,0.1)\" />\n      <EditScreenInfo path=\"/screens/TabTwoScreen.js\" />\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'rgb(255, 108, 71)',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n});\n","import { Ionicons } from '@expo/vector-icons';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\n\nimport Colors from '../constants/Colors';\nimport useColorScheme from '../hooks/useColorScheme';\nimport TabOneScreen from '../screens/TabOneScreen';\nimport TabTwoScreen from '../screens/TabTwoScreen';\nimport { BottomTabParamList, TabOneParamList, TabTwoParamList } from '../types';\n\nconst BottomTab = createBottomTabNavigator<BottomTabParamList>();\n\nexport default function BottomTabNavigator() {\n  const colorScheme = useColorScheme();\n\n  return (\n    <BottomTab.Navigator\n      initialRouteName=\"TabOne\"\n      tabBarOptions={{ activeTintColor: Colors[colorScheme].tint }}>\n      <BottomTab.Screen\n        name=\"Receipe Search\"\n        component={TabOneNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Stored Food\"\n        component={TabTwoNavigator}\n        options={{\n          tabBarIcon: ({ color }) => <TabBarIcon name=\"ios-code\" color={color} />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\n// You can explore the built-in icon families and icons on the web at:\n// https://icons.expo.fyi/\nfunction TabBarIcon(props: { name: string; color: string }) {\n  return <Ionicons size={30} style={{ marginBottom: -3 }} {...props} />;\n}\n\n// Each tab has its own navigation stack, you can read more about this pattern here:\n// https://reactnavigation.org/docs/tab-based-navigation#a-stack-navigator-for-each-tab\nconst TabOneStack = createStackNavigator<TabOneParamList>();\n\nfunction TabOneNavigator() {\n  return (\n    <TabOneStack.Navigator>\n      <TabOneStack.Screen\n        name=\"TabOneScreen\"\n        component={TabOneScreen}\n        options={{ headerTitle: 'Find a new receipe!', backgroundColor: 'rgb(250, 120, 87)' }}\n      />\n    </TabOneStack.Navigator>\n  );\n}\n\nconst TabTwoStack = createStackNavigator<TabTwoParamList>();\n\nfunction TabTwoNavigator() {\n  return (\n    <TabTwoStack.Navigator>\n      <TabTwoStack.Screen\n        name=\"TabTwoScreen\"\n        component={TabTwoScreen}\n        options={{ headerTitle: 'Current Food' }}\n      />\n    </TabTwoStack.Navigator>\n  );\n}\n","import * as Linking from 'expo-linking';\n\nexport default {\n  prefixes: [Linking.makeUrl('/')],\n  config: {\n    screens: {\n      Root: {\n        screens: {\n          TabOne: {\n            screens: {\n              TabOneScreen: 'one',\n            },\n          },\n          TabTwo: {\n            screens: {\n              TabTwoScreen: 'two',\n            },\n          },\n        },\n      },\n      NotFound: '*',\n    },\n  },\n};\n","import { NavigationContainer, DefaultTheme, DarkTheme } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport * as React from 'react';\nimport { ColorSchemeName } from 'react-native';\n\nimport NotFoundScreen from '../screens/NotFoundScreen';\nimport { RootStackParamList } from '../types';\nimport BottomTabNavigator from './BottomTabNavigator';\nimport LinkingConfiguration from './LinkingConfiguration';\n\n// If you are not familiar with React Navigation, we recommend going through the\n// \"Fundamentals\" guide: https://reactnavigation.org/docs/getting-started\nexport default function Navigation({ colorScheme }: { colorScheme: ColorSchemeName }) {\n  return (\n    <NavigationContainer\n      linking={LinkingConfiguration}\n      theme={colorScheme === 'dark' ? DarkTheme : DefaultTheme}>\n      <RootNavigator />\n    </NavigationContainer>\n  );\n}\n\n// A root stack navigator is often used for displaying modals on top of all other content\n// Read more here: https://reactnavigation.org/docs/modal\nconst Stack = createStackNavigator<RootStackParamList>();\n\nfunction RootNavigator() {\n  return (\n    <Stack.Navigator screenOptions={{ headerShown: false }}>\n      <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n      <Stack.Screen name=\"NotFound\" component={NotFoundScreen} options={{ title: 'Oops!' }} />\n    </Stack.Navigator>\n  );\n}\n","import { StatusBar } from 'expo-status-bar';\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\n\nexport default function App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n","import { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as SplashScreen from 'expo-splash-screen';\nimport * as React from 'react';\n\nexport default function useCachedResources() {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHideAsync();\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('../assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hideAsync();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  return isLoadingComplete;\n}\n","// useColorScheme from react-native does not support web currently. You can replace\n// this with react-native-appearance if you would like theme support on web.\nexport default function useColorScheme() {\n  return 'light';\n}","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}